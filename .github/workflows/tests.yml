name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './Pdc.sln'
  
jobs:
  # Check what files have changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.changes.outputs.code }}
      tests-changed: ${{ steps.changes.outputs.tests }}
      should-run-tests: ${{ steps.decide.outputs.should-run }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for proper change detection
        
    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          code:
            - 'src/**'
            - '**/*.cs'
            - '**/*.csproj'
            - '*.sln'
            - '.github/workflows/**'
          tests:
            - 'UnitTests/**'
            - 'Pdc.E2ETests/**'
            - 'test/**'
            
    - name: Check last workflow status
      id: last-status
      run: |
        # Get the status of the last workflow run on the base branch
        LAST_STATUS=$(gh run list \
          --branch ${{ github.base_ref }} \
          --workflow "${{ github.workflow }}" \
          --limit 1 \
          --json conclusion \
          --jq '.[0].conclusion // "unknown"')
        echo "last-status=$LAST_STATUS" >> $GITHUB_OUTPUT
        echo "Last workflow status: $LAST_STATUS"
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Decide if tests should run
      id: decide
      run: |
        CODE_CHANGED="${{ steps.changes.outputs.code }}"
        TESTS_CHANGED="${{ steps.changes.outputs.tests }}"
        LAST_STATUS="${{ steps.last-status.outputs.last-status }}"
        
        # Check if commit message contains force test keywords
        COMMIT_MSG="${{ github.event.pull_request.title }} ${{ github.event.head_commit.message }}"
        FORCE_TESTS=$(echo "$COMMIT_MSG" | grep -iE '\[run tests\]|\[force tests\]|\[test\]' || true)
        
        echo "Code changed: $CODE_CHANGED"
        echo "Tests changed: $TESTS_CHANGED"
        echo "Last status: $LAST_STATUS"
        echo "Force tests: $([ -n "$FORCE_TESTS" ] && echo 'true' || echo 'false')"
        
        # Run tests if:
        # 1. Code has changed, OR
        # 2. Tests have changed, OR  
        # 3. Last workflow wasn't successful, OR
        # 4. This is the first run (no previous status), OR
        # 5. Commit message contains force test keywords
        if [ "$CODE_CHANGED" == "true" ] || [ "$TESTS_CHANGED" == "true" ] || [ "$LAST_STATUS" != "success" ] || [ "$LAST_STATUS" == "unknown" ] || [ -n "$FORCE_TESTS" ]; then
          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "✅ Tests will run"
          if [ -n "$FORCE_TESTS" ]; then
            echo "🔧 Tests forced by commit message"
          fi
        else
          echo "should-run=false" >> $GITHUB_OUTPUT  
          echo "⏭️ Skipping tests - no relevant changes and last run was successful"
        fi

  # Build and test job - now conditional
  build-and-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should-run-tests == 'true'
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Run Unit Tests
      run: |
        dotnet test UnitTests/Pdc.Tests.csproj \
          --configuration ${{ matrix.configuration }} \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/unit \
          --logger "trx;LogFileName=unit-test-results-${{ matrix.configuration }}.trx"
          
    - name: Run E2E Tests
      run: |
        dotnet test Pdc.E2ETests/Pdc.E2ETests.csproj \
          --configuration ${{ matrix.configuration }} \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/e2e \
          --logger "trx;LogFileName=e2e-test-results-${{ matrix.configuration }}.trx"
      
    # Only generate coverage report for Release configuration
    - name: Install ReportGenerator
      if: matrix.configuration == 'Release'
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate Code Coverage Report
      if: matrix.configuration == 'Release'
      run: |
        reportgenerator \
          -reports:"coverage/**/coverage.cobertura.xml" \
          -targetdir:"coverage/report" \
          -reporttypes:"Html;Cobertura;TextSummary;Badges"
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}
        path: |
          coverage/**/*.trx
          
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release' && always()
      with:
        name: coverage-report
        path: coverage/report/
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.configuration == 'Release'
      with:
        files: coverage/**/coverage.cobertura.xml
        fail_ci_if_error: false
        verbose: true
        flags: unittests
        name: codecov-umbrella

  # Skipped tests notification
  tests-skipped:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should-run-tests == 'false'
    
    steps:
    - name: Tests Skipped Notification
      run: |
        echo "## ⏭️ Tests Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Tests were skipped because:" >> $GITHUB_STEP_SUMMARY
        echo "- No relevant code or test files were changed" >> $GITHUB_STEP_SUMMARY  
        echo "- Last workflow run was successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To force test execution, add `[run tests]` to your commit message." >> $GITHUB_STEP_SUMMARY
        
  # Code quality checks - always run for PR changes
  code-quality:
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name == 'pull_request' && needs.changes.outputs.code == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Run Code Analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --verbosity normal \
          /p:TreatWarningsAsErrors=true \
          /p:WarningsAsErrors="" \
          /p:WarningsNotAsErrors="" \
          /p:ExcludeProjects="Pdc.Tests"
          
  # Test summary job - conditional
  test-summary:
    runs-on: ubuntu-latest
    needs: [changes, build-and-test]
    if: always() && needs.changes.outputs.should-run-tests == 'true'
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        path: ./test-results
        
    - name: Download coverage report
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: coverage-report
        path: ./coverage-report
        
    - name: Display Test Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test result files
        unit_tests=$(find ./test-results -name "*unit-test-results*.trx" | wc -l)
        e2e_tests=$(find ./test-results -name "*e2e-test-results*.trx" | wc -l)
        
        echo "### Test Execution" >> $GITHUB_STEP_SUMMARY
        echo "- Unit test configurations: $unit_tests" >> $GITHUB_STEP_SUMMARY
        echo "- E2E test configurations: $e2e_tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f ./coverage-report/Summary.txt ]; then
          echo "### 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat ./coverage-report/Summary.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📁 Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Test results (TRX files)" >> $GITHUB_STEP_SUMMARY
        echo "- Code coverage report (HTML)" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage data uploaded to Codecov" >> $GITHUB_STEP_SUMMARY